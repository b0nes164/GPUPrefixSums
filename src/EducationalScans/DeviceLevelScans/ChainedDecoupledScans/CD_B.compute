/******************************************************************************************************************
 * Chained Decoupled Scan B
 *
 * Variant: Reduce followed by warp-sized radix KoggeStone scans embedded into 
 *          Brent-Kung using partitions equal to two times the maximum size of shared memory
 *          and sub partitions equal to the wave size squared.
 *          
 * Notes:   The purpose of this scan is to attempt to straddle the tradeoff between   
 *          signal propagation latency across thread blocks and the raw memory bandwidth
 *          latency. By using a partition size equal to twice the shared memory we get an
 *          effective memory movement of 2.5n due to 1.5n reads and n writes. Thus, by paying
 *          .5n more reads, we can double our partition size, thus reducing signal propagation
 *          latency. This may be useful in scenarios where the signal propagation latency
 *          is significantly greater than the raw memory bandiwth latency.
 *          
 *          This variant uses the last bit of the first element in shared memory as a flag
 *          **Unrolls and preprocessor macros must be manually changed for AMD**
 *
 * Author:  Thomas Smith 5/9/2023
 *
 * License: The Unlicense
 *          This is free and unencumbered software released into the public domain.
 *          For more information, please refer to the repository license or <https://unlicense.org>
 *   
 * Based off of Research by:
 *          Duane Merrill, Corporation
 *          Michael Garland, Corporation
 *          https://research.nvidia.com/publication/2016-03_single-pass-parallel-prefix-scan-decoupled-look-back
 *
 * This implementation does not constitute ANY form of endorsement or promotion
 * from its authors or Nvidia Corporation. In no event shall Nvidia Corporation
 * be held liable for ANY damages arising in any way out of the use of this 
 * software. The implementation author is not affiliated in ANY way with Nvidia
 * Corporation.
 *
 ******************************************************************************/
#pragma use_dxc
#pragma kernel Init
#pragma kernel CD_B
#pragma kernel CD_B_Timing

#define PARTITION_SIZE      16384
#define PARTITION_MASK      16383
#define SUB_PARTITION_SIZE  8192
#define SUB_PART_MASK       8191
#define GROUP_SIZE          1024
#define THREAD_BLOCKS       256
#define PART_LOG            14
#define SUB_PART_LOG        13
#define SEC_SUB_PART        1

#define LANE_COUNT          32  // <---------------------------   For Nvidia; change depending on hardware
#define LANE_MASK           31
#define LANE_LOG            5
#define WAVES_PER_GROUP     32
#define SUB_SUB_SIZE        1024
#define SUB_SUB_LOG         10
#define SUB_SUB_PARTITIONS  8

//#define LANE_COUNT            64 <-------------------------   AMD 
//#define LANE_MASK             63
//#define LANE_LOG              6    
//#define WAVES_PER_GROUP       16
//#define SUB_SUB_SIZE          4096
//#define SUB_SUB_LOG           12
//#define SUB_SUB_PARTITIONS    2

#define FLAG_NOT_READY  0
#define FLAG_AGGREGATE  1
#define FLAG_INCLUSIVE  2
#define FLAG_MASK       3

#define LANE                    (gtid.x & LANE_MASK)
#define WAVE_INDEX              (gtid.x >> LANE_LOG)
#define SPINE_INDEX             (((gtid.x + 1) << LANE_LOG) - 1)
#define PARTITIONS              ((e_size & PARTITION_MASK) ? \
                                (e_size >> PART_LOG) + 1 : \
                                e_size >> PART_LOG )
#define PARTITION_START         (partitionIndex << PART_LOG)
#define SUB_PARTITIONS          (partitionIndex == PARTITIONS - 1 ? \
                                ((EXACT_SUB_SIZE & SUB_PART_MASK) ? \
                                (EXACT_SUB_SIZE >> SUB_PART_LOG) + 1 : \
                                EXACT_SUB_SIZE >> SUB_PART_LOG ) :  \
                                2 )
#define SUB_PART_START          (subPartitionIndex << SUB_PART_LOG)
#define SEC_SUB_PART_START      (SEC_SUB_PART << SUB_PART_LOG)
#define EXACT_SUB_SIZE          (e_size - PARTITION_START)
#define EXACT_FIRST_SUB_PART    (EXACT_SUB_SIZE > SUB_PARTITION_SIZE ? SUB_PARTITION_SIZE : EXACT_SUB_SIZE)
#define EXACT_SEC_SUB_PART      (EXACT_SUB_SIZE - SEC_SUB_PART_START)

//Adjusted partition indexes for timing kernel
#define T_PART_INDEX            (partitionIndex & 16383)         //For 2^28 ONLY
#define T_PART_START            (T_PART_INDEX << PART_LOG)
#define T_EXACT_SUB_SIZE        (e_size - T_PART_START)
#define T_SUB_PARTITIONS        (partitionIndex == PARTITIONS - 1 ? \
                                ((T_EXACT_SUB_SIZE & SUB_PART_MASK) ? \
                                (T_EXACT_SUB_SIZE >> SUB_PART_LOG) + 1 : \
                                T_EXACT_SUB_SIZE >> SUB_PART_LOG ) :  \
                                2 )
#define T_EXACT_FIRST_SUB_PART  (T_EXACT_SUB_SIZE > SUB_PARTITION_SIZE ? SUB_PARTITION_SIZE : T_EXACT_SUB_SIZE)
#define T_EXACT_SEC_SUB_PART    (T_EXACT_SUB_SIZE - SEC_SUB_PART_START)

extern int e_size;
extern int e_repeats;

globallycoherent RWBuffer<uint> b_state;
RWBuffer<uint> b_prefixSum;
groupshared uint g_sharedMem[SUB_PARTITION_SIZE];

[numthreads(GROUP_SIZE, 1, 1)]
void Init(int3 id : SV_DispatchThreadID)
{
    for (int i = id.x; i < e_size; i += GROUP_SIZE * THREAD_BLOCKS)
        b_prefixSum[i] = 1;
}

[numthreads(GROUP_SIZE, 1, 1)]
void CD_B(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID)
{
    int partitionIndex = 0;
    do
    {
        if (gtid.x == 0)
            InterlockedAdd(b_state[PARTITIONS], 1, g_sharedMem[0]);
        GroupMemoryBarrierWithGroupSync();
        partitionIndex = WaveReadLaneFirst(g_sharedMem[0]);
        GroupMemoryBarrierWithGroupSync();
        
        if (partitionIndex >= PARTITIONS)
            break;
        
        uint temp;
        uint subAggregate = 0;
        if (partitionIndex == PARTITIONS - 1)
        {
            if (SEC_SUB_PART < SUB_PARTITIONS)
            {
                for (int j = gtid.x; j < EXACT_SEC_SUB_PART; j += GROUP_SIZE)
                    subAggregate += WaveActiveSum(b_prefixSum[j + PARTITION_START + SEC_SUB_PART_START]);
                GroupMemoryBarrierWithGroupSync();
            }
            
            for (int j = gtid.x; j < EXACT_FIRST_SUB_PART; j += GROUP_SIZE)
            {
                g_sharedMem[j] = b_prefixSum[j + PARTITION_START];
                subAggregate += WaveActiveSum(g_sharedMem[j]);
                if(j < LANE_COUNT)
                    temp = g_sharedMem[j];
            }
        }
        else
        {
            [unroll(8)]
            for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
                subAggregate += WaveActiveSum(b_prefixSum[j + PARTITION_START + SEC_SUB_PART_START]);
            GroupMemoryBarrierWithGroupSync();
            
            [unroll(8)]
            for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
            {
                g_sharedMem[j] = b_prefixSum[j + PARTITION_START];
                subAggregate += WaveActiveSum(g_sharedMem[j]);
                if (j < LANE_COUNT)
                    temp = g_sharedMem[j];
            }
        }
        GroupMemoryBarrierWithGroupSync();
        
        if (LANE == 0)
            g_sharedMem[WAVE_INDEX] = subAggregate;
        GroupMemoryBarrierWithGroupSync();
        
        if (gtid.x < WAVES_PER_GROUP)
        {
            subAggregate = WaveActiveSum(g_sharedMem[gtid.x]);
            g_sharedMem[gtid.x] = temp;
        }
        
        if (gtid.x == 0)
        {
            if (partitionIndex == 0)
                InterlockedOr(b_state[partitionIndex], FLAG_INCLUSIVE ^ (subAggregate << 2));
            else
                InterlockedOr(b_state[partitionIndex], FLAG_AGGREGATE ^ (subAggregate << 2));
        }
            
        uint aggregate = 0;
        if (partitionIndex != 0)
        {
            int indexOffset = 0;
            do
            {
                if (gtid.x < LANE_COUNT)
                {
                    for (int i = partitionIndex - (gtid.x + indexOffset + 1); 0 <= i; )
                    {
                        uint flagPayload = b_state[i];
                        const int inclusiveIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_INCLUSIVE ? LANE_COUNT : 0));
                        const int gapIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_NOT_READY ? LANE_COUNT : 0));
                        if (inclusiveIndex < gapIndex)
                        {
                            aggregate += WaveActiveSum(gtid.x <= inclusiveIndex ? (flagPayload >> 2) : 0);
                            if (gtid.x == 0)
                            {
                                InterlockedAdd(b_state[partitionIndex], 1 | aggregate << 2);
                                InterlockedOr(g_sharedMem[0], 0x80000000);
                                flagPayload = g_sharedMem[1];
                                g_sharedMem[1] = aggregate;
                                aggregate = flagPayload;
                            }
                            break;
                        }
                        else
                        {
                            aggregate += WaveActiveSum(gtid.x < gapIndex ? (flagPayload >> 2) : 0);
                            indexOffset += gapIndex;
                            break;
                        }
                    }
                }
            } while ((WaveReadLaneFirst(g_sharedMem[0]) & 0x80000000) == 0);
            GroupMemoryBarrierWithGroupSync();
            
            if (gtid.x == 0)
                g_sharedMem[0] &= 0x7FFFFFFF;
            else
                aggregate = WaveReadLaneFirst(g_sharedMem[1]);
            GroupMemoryBarrierWithGroupSync();
            if (gtid.x == 0)
                g_sharedMem[1] = aggregate;
            if (gtid.x < 2)
                aggregate = WaveReadLaneAt(aggregate, 1);
        }
        
        //walk back up the sub partitions
        if (partitionIndex == PARTITIONS - 1)
        {
            for (int j = gtid.x; j < EXACT_FIRST_SUB_PART; j += GROUP_SIZE)
                g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
            GroupMemoryBarrierWithGroupSync();
            
            if (gtid.x < (EXACT_FIRST_SUB_PART >> LANE_LOG))
                g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
            GroupMemoryBarrierWithGroupSync();
            
            for (int j = 0; j < SUB_SUB_PARTITIONS; ++j)
            {
                const int t = gtid.x + (j << SUB_SUB_LOG);
                if (t < EXACT_FIRST_SUB_PART)
                {
                    b_prefixSum[t + PARTITION_START] = g_sharedMem[t] + aggregate +
                        ((t + 1 & LANE_MASK) && WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[t - 1]) : 0);
            
                    aggregate += WaveReadLaneFirst(g_sharedMem[(j + 1 << SUB_SUB_LOG) - 1]);
                }
            }
            
            if (SEC_SUB_PART < SUB_PARTITIONS)
            {
                for (int j = gtid.x; j < EXACT_SEC_SUB_PART; j += GROUP_SIZE)
                {
                    g_sharedMem[j] = b_prefixSum[j + PARTITION_START + SEC_SUB_PART_START];
                    g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
                }
                GroupMemoryBarrierWithGroupSync();
                
                if (gtid.x < (EXACT_SEC_SUB_PART >> LANE_LOG))
                    g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
                GroupMemoryBarrierWithGroupSync();
                
                for (int j = 0; j < SUB_SUB_PARTITIONS; ++j)
                {
                    const int t = gtid.x + (j << SUB_SUB_LOG);
                    if (t < EXACT_SEC_SUB_PART)
                    {
                        b_prefixSum[t + PARTITION_START + SEC_SUB_PART_START] = g_sharedMem[t] + aggregate +
                        ((t + 1 & LANE_MASK) && WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[t - 1]) : 0);
            
                        aggregate += WaveReadLaneFirst(g_sharedMem[(j + 1 << SUB_SUB_LOG) - 1]);
                    }
                }
            }
        }
        else
        {
            for (int subPartitionIndex = 0; subPartitionIndex <= SEC_SUB_PART; ++subPartitionIndex)
            {
                if (subPartitionIndex)
                {
                    [unroll(8)]
                    for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
                    {
                        g_sharedMem[j] = b_prefixSum[j + PARTITION_START + SEC_SUB_PART_START];
                        g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
                    }
                }
                else
                {
                    [unroll(8)]
                    for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
                        g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
                }
                GroupMemoryBarrierWithGroupSync();
                
                if (gtid.x < (SUB_PARTITION_SIZE >> LANE_LOG))
                    g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
                GroupMemoryBarrierWithGroupSync();
                
                for (int j = 0; j < SUB_SUB_PARTITIONS; ++j)
                {
                    const int t = gtid.x + (j << SUB_SUB_LOG);
                    b_prefixSum[t + PARTITION_START + SUB_PART_START] = g_sharedMem[t] + aggregate +
                        ((t + 1 & LANE_MASK) && WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[t - 1]) : 0);
            
                    aggregate += WaveReadLaneFirst(g_sharedMem[(j + 1 << SUB_SUB_LOG) - 1]);
                }
            }
        }
    } while (partitionIndex + THREAD_BLOCKS < PARTITIONS);
}

/******************************************************************************
 * This is timing version of the scan. It is as similar as possible to the above
 * algorithm except that it can perform multiple loops. HOWEVER, IT IS NOT IDENTICAL,
 * and should only be interpreted as an approximation of the original algorithm. 
 ******************************************************************************/
[numthreads(GROUP_SIZE, 1, 1)]
void CD_B_Timing(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID)
{
    int partitionIndex = 0;
    do
    {
        if (gtid.x == 0)
            InterlockedAdd(b_state[PARTITIONS * e_repeats], 1, g_sharedMem[0]);
        GroupMemoryBarrierWithGroupSync();
        partitionIndex = WaveReadLaneFirst(g_sharedMem[0]);
        GroupMemoryBarrierWithGroupSync();
        
        if (partitionIndex >= PARTITIONS * e_repeats)
            break;
        
        uint temp;
        uint subAggregate = 0;
        if (T_PART_INDEX == PARTITIONS - 1)
        {
            if (SEC_SUB_PART < T_SUB_PARTITIONS)
            {
                for (int j = gtid.x; j < T_EXACT_SEC_SUB_PART; j += GROUP_SIZE)
                    subAggregate += WaveActiveSum(b_prefixSum[j + T_PART_START + SEC_SUB_PART_START]);
                GroupMemoryBarrierWithGroupSync();
            }
            
            for (int j = gtid.x; j < T_EXACT_FIRST_SUB_PART; j += GROUP_SIZE)
            {
                g_sharedMem[j] = b_prefixSum[j + T_PART_START];
                subAggregate += WaveActiveSum(g_sharedMem[j]);
                if (j < LANE_COUNT)
                    temp = g_sharedMem[j];
            }
        }
        else
        {
            [unroll(8)]
            for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
                subAggregate += WaveActiveSum(b_prefixSum[j + T_PART_START + SEC_SUB_PART_START]);
            GroupMemoryBarrierWithGroupSync();
            
            [unroll(8)]
            for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
            {
                g_sharedMem[j] = b_prefixSum[j + T_PART_START];
                subAggregate += WaveActiveSum(g_sharedMem[j]);
                if (j < LANE_COUNT)
                    temp = g_sharedMem[j];
            }
        }
        GroupMemoryBarrierWithGroupSync();
        
        if (LANE == 0)
            g_sharedMem[WAVE_INDEX] = subAggregate;
        GroupMemoryBarrierWithGroupSync();
        
        if (gtid.x < WAVES_PER_GROUP)
        {
            subAggregate = WaveActiveSum(g_sharedMem[gtid.x]);
            g_sharedMem[gtid.x] = temp;
        }
        
        if (gtid.x == 0)
        {
            if (T_PART_INDEX == 0)
                InterlockedOr(b_state[partitionIndex], FLAG_INCLUSIVE ^ (subAggregate << 2));
            else
                InterlockedOr(b_state[partitionIndex], FLAG_AGGREGATE ^ (subAggregate << 2));
        }
            
        uint aggregate = 0;
        if (T_PART_INDEX != 0)
        {
            int indexOffset = 0;
            do
            {
                if (gtid.x < LANE_COUNT)
                {
                    for (int i = partitionIndex - (gtid.x + indexOffset + 1); 0 <= i; )
                    {
                        uint flagPayload = b_state[i];
                        const int inclusiveIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_INCLUSIVE ? LANE_COUNT : 0));
                        const int gapIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_NOT_READY ? LANE_COUNT : 0));
                        if (inclusiveIndex < gapIndex)
                        {
                            aggregate += WaveActiveSum(gtid.x <= inclusiveIndex ? (flagPayload >> 2) : 0);
                            if (gtid.x == 0)
                            {
                                InterlockedAdd(b_state[partitionIndex], 1 | aggregate << 2);
                                InterlockedOr(g_sharedMem[0], 0x80000000);
                                flagPayload = g_sharedMem[1];
                                g_sharedMem[1] = aggregate;
                                aggregate = flagPayload;
                            }
                            break;
                        }
                        else
                        {
                            aggregate += WaveActiveSum(gtid.x < gapIndex ? (flagPayload >> 2) : 0);
                            indexOffset += gapIndex;
                            break;
                        }
                    }
                }
            } while ((WaveReadLaneFirst(g_sharedMem[0]) & 0x80000000) == 0);
            GroupMemoryBarrierWithGroupSync();
            
            if (gtid.x == 0)
                g_sharedMem[0] &= 0x7FFFFFFF;
            else
                aggregate = WaveReadLaneFirst(g_sharedMem[1]);
            GroupMemoryBarrierWithGroupSync();
            if (gtid.x == 0)
                g_sharedMem[1] = aggregate;
            if (gtid.x < 2)
                aggregate = WaveReadLaneAt(aggregate, 1);
        }
        
        //walk back up the sub partitions
        if (T_PART_INDEX == PARTITIONS - 1)
        {
            for (int j = gtid.x; j < T_EXACT_FIRST_SUB_PART; j += GROUP_SIZE)
                g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
            GroupMemoryBarrierWithGroupSync();
            
            if (gtid.x < (T_EXACT_FIRST_SUB_PART >> LANE_LOG))
                g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
            GroupMemoryBarrierWithGroupSync();
            
            for (int j = 0; j < SUB_SUB_PARTITIONS; ++j)
            {
                const int t = gtid.x + (j << SUB_SUB_LOG);
                if (t < T_EXACT_FIRST_SUB_PART)
                {
                    b_prefixSum[t + T_PART_START] = g_sharedMem[t] + aggregate +
                        ((t + 1 & LANE_MASK) && WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[t - 1]) : 0);
            
                    aggregate += WaveReadLaneFirst(g_sharedMem[(j + 1 << SUB_SUB_LOG) - 1]);
                }
            }
            
            if (SEC_SUB_PART < T_SUB_PARTITIONS)
            {
                for (int j = gtid.x; j < T_EXACT_SEC_SUB_PART; j += GROUP_SIZE)
                {
                    g_sharedMem[j] = b_prefixSum[j + T_PART_START + SEC_SUB_PART_START];
                    g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
                }
                GroupMemoryBarrierWithGroupSync();
                
                if (gtid.x < (T_EXACT_SEC_SUB_PART >> LANE_LOG))
                    g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
                GroupMemoryBarrierWithGroupSync();
                
                for (int j = 0; j < SUB_SUB_PARTITIONS; ++j)
                {
                    const int t = gtid.x + (j << SUB_SUB_LOG);
                    if (t < T_EXACT_SEC_SUB_PART)
                    {
                        b_prefixSum[t + T_PART_START + SEC_SUB_PART_START] = g_sharedMem[t] + aggregate +
                        ((t + 1 & LANE_MASK) && WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[t - 1]) : 0);
            
                        aggregate += WaveReadLaneFirst(g_sharedMem[(j + 1 << SUB_SUB_LOG) - 1]);
                    }
                }
            }
        }
        else
        {
            for (int subPartitionIndex = 0; subPartitionIndex <= SEC_SUB_PART; ++subPartitionIndex)
            {
                if (subPartitionIndex)
                {
                    [unroll(8)]
                    for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
                    {
                        g_sharedMem[j] = b_prefixSum[j + T_PART_START + SEC_SUB_PART_START];
                        g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
                    }
                }
                else
                {
                    [unroll(8)]
                    for (int j = gtid.x; j < SUB_PARTITION_SIZE; j += GROUP_SIZE)
                        g_sharedMem[j] += WavePrefixSum(g_sharedMem[j]);
                }
                GroupMemoryBarrierWithGroupSync();
                
                if (gtid.x < (SUB_PARTITION_SIZE >> LANE_LOG))
                    g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
                GroupMemoryBarrierWithGroupSync();
                
                for (int j = 0; j < SUB_SUB_PARTITIONS; ++j)
                {
                    const int t = gtid.x + (j << SUB_SUB_LOG);
                    b_prefixSum[t + T_PART_START + SUB_PART_START] = g_sharedMem[t] + aggregate +
                        ((t + 1 & LANE_MASK) && WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[t - 1]) : 0);
            
                    aggregate += WaveReadLaneFirst(g_sharedMem[(j + 1 << SUB_SUB_LOG) - 1]);
                }
            }
        }
    } while (partitionIndex + THREAD_BLOCKS < PARTITIONS * e_repeats);
}