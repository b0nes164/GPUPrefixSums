/******************************************************************************
 * Block Level Warp-Sized Radix Brent Kung using shared memory.
 * 
 * Variant: Partition size equal to maximum shared memory size.
 *          Shared memory size equal to maximum.
 *
 * Notes: **Unrolls and preprocessor macros must be manually changed for AMD**
 *
 * Author:  Thomas Smith 5/9/2023
 *
 * License: The Unlicense
 *          This is free and unencumbered software released into the public domain.
 *          For more information, please refer to the repository license or <https://unlicense.org>
 *
 ******************************************************************************/
#pragma use_dxc
#pragma kernel Init
#pragma kernel Block_BK_B
#pragma kernel Block_BK_B_Timing

#define PARTITION_SIZE  8192
#define PARTITION_HALF  4096
#define PARTITION_MASK  8191
#define GROUP_SIZE      1024
#define PART_LOG        13
#define GROUP_LOG       10

#define LANE_COUNT  32  // <---------------------------   For Nvidia; change depending on hardware
#define LANE_MASK   31
#define LANE_LOG    5

//#define LANE_COUNT    64 <-------------------------   AMD 
//#define LANE_MASK     63
//#define LANE_LOG      6    

#define SPINE_INDEX     (((i + 1) << offset) - 1)
#define PARTITIONS      ((e_size & PARTITION_MASK) ? \
                        (e_size >> PART_LOG) + 1 : \
                        e_size >> PART_LOG)
#define PARTITION_START (partitionIndex << PART_LOG)
#define NEXT_POWER      (j << LANE_LOG)

extern int e_size;
extern int e_repeats;

RWBuffer<uint> b_prefixSum;
groupshared uint g_sharedMem[PARTITION_SIZE];

[numthreads(GROUP_SIZE, 1, 1)]
void Init(int3 id : SV_DispatchThreadID)
{
    for (int i = id.x; i < e_size; i += (GROUP_SIZE << 8))
        b_prefixSum[i] = 1;
}

[numthreads(GROUP_SIZE, 1, 1)]
void Block_BK_B(int3 gtid : SV_GroupThreadID)
{
    uint aggregate = 0;
    for (int partitionIndex = 0; partitionIndex < PARTITIONS - 1; ++partitionIndex)
    {
        for (int i = gtid.x; i < PARTITION_SIZE; i += GROUP_SIZE)
        {
            g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
            g_sharedMem[i] += WavePrefixSum(g_sharedMem[i]);
        }
        
        if (gtid.x < LANE_COUNT)
            b_prefixSum[PARTITION_START + gtid.x] = g_sharedMem[gtid.x] + aggregate;
        GroupMemoryBarrierWithGroupSync();
        
        int offset = LANE_LOG;
        for (int j = LANE_COUNT; j < PARTITION_HALF; j <<= LANE_LOG)
        {
            for (int i = gtid.x; i < (PARTITION_SIZE >> offset); i += GROUP_SIZE)
                g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
            GroupMemoryBarrierWithGroupSync();
            
            for (int i = gtid.x + j; i < PARTITION_SIZE; i += GROUP_SIZE)
            {
                if ((i & NEXT_POWER - 1) >= j)
                {
                    if (i < NEXT_POWER)
                    {
                        b_prefixSum[PARTITION_START + i] = g_sharedMem[i] + aggregate +
                                ((i + 1 & j - 1) ? WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]) : 0);
                    }
                    else
                    {
                        if ((i + 1 & j - 1) != 0)
                            g_sharedMem[i] += WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]);
                    }
                }
            }
            offset += LANE_LOG;
        }
        GroupMemoryBarrierWithGroupSync();
        
        for (int i = gtid.x + j; i < PARTITION_SIZE; i += GROUP_SIZE)            
            b_prefixSum[PARTITION_START + i] = g_sharedMem[i] + aggregate + WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]);
        
        aggregate += WaveReadLaneFirst(g_sharedMem[PARTITION_SIZE - 1]);
        GroupMemoryBarrierWithGroupSync();
    }
    
    int partitionSize = e_size - PARTITION_START;
    for (int i = gtid.x; i < partitionSize; i += GROUP_SIZE)
    {
        g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i]);
    }
        
    if (gtid.x < LANE_COUNT && gtid.x < partitionSize)
        b_prefixSum[PARTITION_START + gtid.x] = g_sharedMem[gtid.x] + aggregate;
    GroupMemoryBarrierWithGroupSync();
        
    int offset = LANE_LOG;
    for (int j = 1 << LANE_LOG; j < partitionSize; j <<= LANE_LOG)
    {
        for (int i = gtid.x; i < (partitionSize >> offset); i += GROUP_SIZE)
            g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
        GroupMemoryBarrierWithGroupSync();
            
        for (int i = gtid.x + j; i < partitionSize; i += GROUP_SIZE)
        {
            if ((i & NEXT_POWER - 1) >= j)
            {
                if (i < NEXT_POWER)
                {
                    b_prefixSum[PARTITION_START + i] = g_sharedMem[i] + aggregate +
                                ((i + 1 & j - 1) ? WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]) : 0);
                }
                else
                {
                    if ((i + 1 & j - 1) != 0)
                        g_sharedMem[i] += WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]);
                }
            }
        }
        offset += LANE_LOG;
    }
}

/******************************************************************************
 * This is timing version of the scan. It is as similar as possible to the above
 * algorithm except that it can perform multiple loops. HOWEVER, IT IS NOT IDENTICAL,
 * and should only be interpreted as an approximation of the original algorithm. 
 ******************************************************************************/
[numthreads(GROUP_SIZE, 1, 1)]
void Block_BK_B_Timing(int3 gtid : SV_GroupThreadID)
{
    for (int g = 0; g < e_repeats; ++g)
    {
        uint aggregate = 0;
        for (int partitionIndex = 0; partitionIndex < PARTITIONS - 1; ++partitionIndex)
        {
            for (int i = gtid.x; i < PARTITION_SIZE; i += GROUP_SIZE)
            {
                g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
                g_sharedMem[i] += WavePrefixSum(g_sharedMem[i]);
            }
        
            if (gtid.x < LANE_COUNT)
                b_prefixSum[PARTITION_START + gtid.x] = g_sharedMem[gtid.x] + aggregate;
            GroupMemoryBarrierWithGroupSync();
        
            int offset = LANE_LOG;
            for (int j = LANE_COUNT; j < PARTITION_HALF; j <<= LANE_LOG)
            {
                for (int i = gtid.x; i < (PARTITION_SIZE >> offset); i += GROUP_SIZE)
                    g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
                GroupMemoryBarrierWithGroupSync();
            
                for (int i = gtid.x + j; i < PARTITION_SIZE; i += GROUP_SIZE)
                {
                    if ((i & NEXT_POWER - 1) >= j)
                    {
                        if (i < NEXT_POWER)
                        {
                            b_prefixSum[PARTITION_START + i] = g_sharedMem[i] + aggregate +
                                ((i + 1 & j - 1) ? WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]) : 0);
                        }
                        else
                        {
                            if ((i + 1 & j - 1) != 0)
                                g_sharedMem[i] += WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]);
                        }
                    }
                }
                offset += LANE_LOG;
            }
            GroupMemoryBarrierWithGroupSync();
        
            for (int i = gtid.x + j; i < PARTITION_SIZE; i += GROUP_SIZE)            
                b_prefixSum[PARTITION_START + i] = g_sharedMem[i] + aggregate + WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]);
        
            aggregate += WaveReadLaneFirst(g_sharedMem[PARTITION_SIZE - 1]);
            GroupMemoryBarrierWithGroupSync();
        }
    
        int partitionSize = e_size - PARTITION_START;
        for (int i = gtid.x; i < partitionSize; i += GROUP_SIZE)
        {
            g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
            g_sharedMem[i] += WavePrefixSum(g_sharedMem[i]);
        }
        
        if (gtid.x < LANE_COUNT && gtid.x < partitionSize)
            b_prefixSum[PARTITION_START + gtid.x] = g_sharedMem[gtid.x] + aggregate;
        GroupMemoryBarrierWithGroupSync();
        
        int offset = LANE_LOG;
        for (int j = 1 << LANE_LOG; j < partitionSize; j <<= LANE_LOG)
        {
            for (int i = gtid.x; i < (partitionSize >> offset); i += GROUP_SIZE)
                g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX]);
            GroupMemoryBarrierWithGroupSync();
            
            for (int i = gtid.x + j; i < partitionSize; i += GROUP_SIZE)
            {
                if ((i & NEXT_POWER - 1) >= j)
                {
                    if (i < NEXT_POWER)
                    {
                        b_prefixSum[PARTITION_START + i] = g_sharedMem[i] + aggregate +
                                ((i + 1 & j - 1) ? WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]) : 0);
                    }
                    else
                    {
                        if ((i + 1 & j - 1) != 0)
                            g_sharedMem[i] += WaveReadLaneFirst(g_sharedMem[((i >> offset) << offset) - 1]);
                    }
                }
            }
            offset += LANE_LOG;
        }
    }
}