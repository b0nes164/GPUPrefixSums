/*****************************************************************************
 * Simple MemCpy kernel
 *
 * Author:  Thomas Smith 8/7/2023
 * 
 * License: The Unlicense
 *          This is free and unencumbered software released into the public domain.
 *          For more information, please refer to the repository license or <https://unlicense.org>
 *
 ******************************************************************************/
#pragma use_dxc
#pragma kernel MemCpy

#define GROUP_SIZE 512
#define THREAD_BLOCKS 512

extern int e_size;
extern int e_repeats;
RWBuffer<uint4> bufferA;
RWBuffer<uint4> bufferB;
RWBuffer<uint> timingBuffer;

[numthreads(GROUP_SIZE, 1, 1)]
void MemCpy(int3 id : SV_DispatchThreadID)
{
    const uint inc = GROUP_SIZE * THREAD_BLOCKS;
    const uint vecSize = e_size >> 2;
    const uint repeats = e_repeats;
    
    for (int k = 0; k < repeats; ++k)
    {
        for (int i = id.x; i < vecSize; i += inc)
            bufferA[i] = bufferB[i];
    }
    
    //to time the kernel execution
    if (id.x == 0)
        timingBuffer[id.x] = id.x;
}