/******************************************************************************************************************
 * Chained Decoupled Scan Speed Vectorized
 *
 * Scan:    Warp-sized radix raking reduce scan
 * 
 * Variant: Raking warp-sized radix reduce using partitions of size equal to 
 *          maximum shared memory using vector loads and stores. All non-power of 
            two functionality removed.
 *
 * Note:    This variant uses the last bit of the first element in shared memory as a flag
 *
 * Author:  Thomas Smith 5/9/2023
 *
 * License: The Unlicense
 *          This is free and unencumbered software released into the public domain.
 *          For more information, please refer to the repository license or <https://unlicense.org>
 *   
 * Based off of Research by:
 *          Duane Merrill, Corporation
 *          Michael Garland, Corporation
 *          https://research.nvidia.com/publication/2016-03_single-pass-parallel-prefix-scan-decoupled-look-back
 *
 * This implementation does not constitute ANY form of endorsement or promotion
 * from its authors or Nvidia Corporation. In no event shall Nvidia Corporation
 * be held liable for ANY damages arising in any way out of the use of this 
 * software. The implementation author is not affiliated in ANY way with Nvidia
 * Corporation.
 *
 ******************************************************************************/
#pragma use_dxc
#pragma kernel Init
#pragma kernel CD_SPEED_Vectorized
#pragma kernel CD_SPEED_Vectorized_Timing

#define PARTITIONS          32768       // ((2^28) / PARTITION_SIZE * VECTOR_SIZE)
#define PARTITION_SIZE      2048
#define PARTITION_MASK      2047
#define GROUP_SIZE          1024
#define THREAD_BLOCKS       256
#define PART_LOG            11

#define VECTOR_MASK         3
#define VECTOR_LOG          2

#define LANE_COUNT          32  // <---------------------------   For Nvidia; change depending on hardware
#define LANE_MASK           31
#define LANE_LOG            5
#define WAVES_PER_GROUP     32
#define WAVE_PARTITION_SIZE 64
#define WAVE_PART_LOG       6

//#define LANE_COUNT            64 <-------------------------   AMD 
//#define LANE_MASK             63
//#define LANE_LOG              6    
//#define WAVES_PER_GROUP       16
//#define WAVE_PARTITION_SIZE   128
//#define WAVE_PART_LOG         7

#define FLAG_NOT_READY  0
#define FLAG_AGGREGATE  1
#define FLAG_PREFIX     2
#define FLAG_MASK       3

//Preprocessor macros for inlining
#define LANE                (gtid.x & LANE_MASK)
#define WAVE_INDEX          (gtid.x >> LANE_LOG)
#define SPINE_INDEX         (((gtid.x + 1) << WAVE_PART_LOG) - 1)
#define PARTITION_START     (partitionIndex << PART_LOG)
#define WAVE_PART_START     (WAVE_INDEX << WAVE_PART_LOG)
#define WAVE_PART_END       (WAVE_INDEX + 1 << WAVE_PART_LOG)

//Adjusted partition indexes for timing kernel
#define T_PART_INDEX        (partitionIndex & 32767)
#define T_PART_START        (T_PART_INDEX << PART_LOG)

extern int e_repeats;

globallycoherent RWBuffer<uint> b_state;
RWStructuredBuffer<uint> b_prefixLoad;
RWBuffer<uint4> b_prefixSum;
groupshared uint4 g_sharedMem[PARTITION_SIZE];

[numthreads(GROUP_SIZE, 1, 1)]
void Init(int3 id : SV_DispatchThreadID)
{
    const int size = 1 << 28;
    for (int i = id.x; i < size; i += GROUP_SIZE * THREAD_BLOCKS)
        b_prefixLoad[i] = 1;
}

[numthreads(GROUP_SIZE, 1, 1)]
void CD_SPEED_Vectorized(int3 gtid : SV_GroupThreadID)
{
    int partitionIndex;
    do
    {
        if (gtid.x == 0)
            InterlockedAdd(b_state[PARTITIONS], 1, g_sharedMem[0].x);
        GroupMemoryBarrierWithGroupSync();
        partitionIndex = WaveReadLaneFirst(g_sharedMem[0].x);
        GroupMemoryBarrierWithGroupSync();
        
        int i = LANE + WAVE_PART_START;
        g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
        g_sharedMem[i].y += g_sharedMem[i].x;
        g_sharedMem[i].z += g_sharedMem[i].y;
        g_sharedMem[i].w += g_sharedMem[i].z;
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].w);
        
        i += LANE_COUNT;
        g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
        g_sharedMem[i].y += g_sharedMem[i].x;
        g_sharedMem[i].z += g_sharedMem[i].y;
        g_sharedMem[i].w += g_sharedMem[i].z;
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].w) + WaveReadLaneFirst(g_sharedMem[i - 1].w);
        GroupMemoryBarrierWithGroupSync();
        
        if (gtid.x < WAVES_PER_GROUP)
            g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX].w);
        GroupMemoryBarrierWithGroupSync();
            
            //Set flag payload
        if (gtid.x == 0)
        {
            if (partitionIndex == 0)
                InterlockedOr(b_state[partitionIndex], FLAG_PREFIX ^ (g_sharedMem[PARTITION_MASK].w << 2));
            else
                InterlockedOr(b_state[partitionIndex], FLAG_AGGREGATE ^ (g_sharedMem[PARTITION_MASK].w << 2));
        }
            
        uint aggregate = 0;
        if (partitionIndex != 0)
        {
            int indexOffset = 0;
            do
            {
                if (gtid.x < LANE_COUNT) //Restrict lookback to first warp
                {
                    for (int i = partitionIndex - (gtid.x + indexOffset + 1); 0 <= i; i -= LANE_COUNT)
                    {
                        uint flagPayload = b_state[i];
                        const int prefixIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_PREFIX ? LANE_COUNT : 0));
                        const int gapIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_NOT_READY ? LANE_COUNT : 0));
                        if (prefixIndex < gapIndex)
                        {
                            aggregate += WaveActiveSum(gtid.x <= prefixIndex ? (flagPayload >> 2) : 0);
                            if (gtid.x == 0)
                            {
                                    //use flagPayload as a dummy variable, as we are done with it, because 
                                    //InterlockedExchange is the easiest way of updating the global flag payload
                                    //InterlockedCompareStore appears to be significantly slower
                                InterlockedExchange(b_state[partitionIndex], FLAG_PREFIX ^ (aggregate + g_sharedMem[PARTITION_MASK].w << 2), flagPayload);
                                InterlockedOr(g_sharedMem[0].x, 0x80000000);
                                flagPayload = g_sharedMem[1].x;
                                g_sharedMem[1].x = aggregate;
                                aggregate = flagPayload;
                            }
                            break;
                        }
                        else
                        {
                            aggregate += WaveActiveSum(gtid.x < gapIndex ? (flagPayload >> 2) : 0);
                            indexOffset += gapIndex;
                            break;
                        }
                    }
                }
            } while ((WaveReadLaneFirst(g_sharedMem[0].x) & 0x80000000) == 0);
            GroupMemoryBarrierWithGroupSync();
            
                //propogate aggregate values
            if (gtid.x == 0)
                g_sharedMem[0].x &= 0x7FFFFFFF;
            else
                aggregate = WaveReadLaneFirst(g_sharedMem[1].x);
            GroupMemoryBarrierWithGroupSync();
            if (gtid.x == 0)
                g_sharedMem[1].x = aggregate;
            if (gtid.x < 2)
                aggregate = WaveReadLaneAt(aggregate, 1);
        }

        i = LANE + WAVE_PART_START;
        const uint prev = (WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[i - 1].w) : 0) + aggregate;
        b_prefixSum[i + PARTITION_START] = g_sharedMem[i] + prev;
        i += LANE_COUNT;
        b_prefixSum[i + PARTITION_START] = g_sharedMem[i] + (LANE != LANE_MASK ? prev : aggregate);
    } while (partitionIndex + THREAD_BLOCKS < PARTITIONS);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CD_SPEED_Vectorized_Timing(int3 gtid : SV_GroupThreadID)
{
    int partitionIndex;
    do
    {
        if (gtid.x == 0)
            InterlockedAdd(b_state[PARTITIONS * e_repeats], 1, g_sharedMem[0].x);
        GroupMemoryBarrierWithGroupSync();
        partitionIndex = WaveReadLaneFirst(g_sharedMem[0].x);
        GroupMemoryBarrierWithGroupSync();
        
        int i = LANE + WAVE_PART_START;
        g_sharedMem[i] = b_prefixSum[i + T_PART_START];
        g_sharedMem[i].y += g_sharedMem[i].x;
        g_sharedMem[i].z += g_sharedMem[i].y;
        g_sharedMem[i].w += g_sharedMem[i].z;
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].w);
        
        i += LANE_COUNT;
        g_sharedMem[i] = b_prefixSum[i + T_PART_START];
        g_sharedMem[i].y += g_sharedMem[i].x;
        g_sharedMem[i].z += g_sharedMem[i].y;
        g_sharedMem[i].w += g_sharedMem[i].z;
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].w) + WaveReadLaneFirst(g_sharedMem[i - 1].w);
        GroupMemoryBarrierWithGroupSync();
        
        if (gtid.x < WAVES_PER_GROUP)
            g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX].w);
        GroupMemoryBarrierWithGroupSync();
            
            //Set flag payload
        if (gtid.x == 0)
        {
            if (T_PART_INDEX == 0)
                InterlockedOr(b_state[partitionIndex], FLAG_PREFIX ^ (g_sharedMem[PARTITION_MASK].w << 2));
            else
                InterlockedOr(b_state[partitionIndex], FLAG_AGGREGATE ^ (g_sharedMem[PARTITION_MASK].w << 2));
        }
            
        uint aggregate = 0;
        if (T_PART_INDEX != 0)
        {
            int indexOffset = 0;
            do
            {
                if (gtid.x < LANE_COUNT) //Restrict lookback to first warp
                {
                    for (int i = partitionIndex - (gtid.x + indexOffset + 1); 0 <= i; i -= LANE_COUNT)
                    {
                        uint flagPayload = b_state[i];
                        const int prefixIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_PREFIX ? LANE_COUNT : 0));
                        const int gapIndex = WaveActiveMin(gtid.x + LANE_COUNT - ((flagPayload & FLAG_MASK) == FLAG_NOT_READY ? LANE_COUNT : 0));
                        if (prefixIndex < gapIndex)
                        {
                            aggregate += WaveActiveSum(gtid.x <= prefixIndex ? (flagPayload >> 2) : 0);
                            if (gtid.x == 0)
                            {
                                //use flagPayload as a dummy variable, as we are done with it, because 
                                //InterlockedExchange is the easiest way of updating the global flag payload
                                //InterlockedCompareStore appears to be significantly slower
                                InterlockedExchange(b_state[partitionIndex], FLAG_PREFIX ^ (aggregate + g_sharedMem[PARTITION_MASK].w << 2), flagPayload);
                                InterlockedOr(g_sharedMem[0].x, 0x80000000);
                                flagPayload = g_sharedMem[1].x;
                                g_sharedMem[1].x = aggregate;
                                aggregate = flagPayload;
                            }
                            break;
                        }
                        else
                        {
                            aggregate += WaveActiveSum(gtid.x < gapIndex ? (flagPayload >> 2) : 0);
                            indexOffset += gapIndex;
                            break;
                        }
                    }
                }
            } while ((WaveReadLaneFirst(g_sharedMem[0].x) & 0x80000000) == 0);
            GroupMemoryBarrierWithGroupSync();
            
            //propogate aggregate values
            if (gtid.x == 0)
                g_sharedMem[0].x &= 0x7FFFFFFF;
            else
                aggregate = WaveReadLaneFirst(g_sharedMem[1].x);
            GroupMemoryBarrierWithGroupSync();
            if (gtid.x == 0)
                g_sharedMem[1].x = aggregate;
            if (gtid.x < 2)
                aggregate = WaveReadLaneAt(aggregate, 1);
        }

        i = LANE + WAVE_PART_START;
        const uint prev = (WAVE_INDEX ? WaveReadLaneFirst(g_sharedMem[i - 1].w) : 0) + aggregate;
        b_prefixSum[i + T_PART_START] = g_sharedMem[i] + prev;
        i += LANE_COUNT;
        b_prefixSum[i + T_PART_START] = g_sharedMem[i] + (LANE != LANE_MASK ? prev : aggregate);
    } while (partitionIndex + THREAD_BLOCKS < PARTITIONS * e_repeats);
}