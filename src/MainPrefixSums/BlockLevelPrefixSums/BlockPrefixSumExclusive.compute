/*****************************************************************************
 * Block Level Exclusive Vectorized Warp-Scan Raking Reduce then Scan
 * 
 * Variant: Partition tile equal to the maximum size of shared memory.
 *          The partition is equally subdivided amongst the warps.
 *          Each thread performs a serial scan on a single vector input, followed
 *          by warp wide KoggeStone Scans on the w element of each thread vector. This 
 *          proceeds until the entire warp partition is consumed. Finally, the block wide 
 *          aggregate is computed using a single Kogge-Stone warp-scan along the spine
 *          of partition, and the result is propagated directly back into device memory
 *
 * Notes: **Preprocessor macros must be manually changed for AMD**
 * 
 * Author:  Thomas Smith 8/5/2023
 * 
 * License: The Unlicense
 *          This is free and unencumbered software released into the public domain.
 *          For more information, please refer to the repository license or <https://unlicense.org>
 *
 ******************************************************************************/
#pragma use_dxc
#pragma kernel Init
#pragma kernel BlockPrefixSumExclusive

#define PARTITION_SIZE      8192
#define PART_VEC_SIZE       2048
#define PART_VEC_MASK       2047
#define GROUP_SIZE          1024
#define PART_LOG            13
#define PART_VEC_LOG        11

#define VECTOR_MASK         3
#define VECTOR_LOG          2

#define LANE_COUNT          32  // <---------------------------   For Nvidia; change depending on hardware
#define LANE_MASK           31
#define LANE_LOG            5
#define WAVES_PER_GROUP     32
#define WAVE_PARTITION_SIZE 64
#define WAVE_PART_LOG       6

//#define LANE_COUNT            64 <-------------------------   AMD 
//#define LANE_MASK             63
//#define LANE_LOG              6    
//#define WAVES_PER_GROUP       16
//#define WAVE_PARTITION_SIZE   128
//#define WAVE_PART_LOG         7

#define LANE                gtid.x
#define WAVE_INDEX          gtid.y
#define SPINE_INDEX         (((gtid.x + 1) << WAVE_PART_LOG) - 1)
#define PARTITIONS          (e_size >> PART_LOG)
#define PARTITION_START     (partitionIndex << PART_VEC_LOG)
#define WAVE_PART_START     (WAVE_INDEX << WAVE_PART_LOG)
#define WAVE_PART_END       (WAVE_INDEX + 1 << WAVE_PART_LOG)

extern int e_size;
extern int e_repeats;

RWStructuredBuffer<uint> b_prefixLoad;
RWBuffer<uint4> b_prefixSum;
RWBuffer<uint> b_timing;
groupshared uint4 g_sharedMem[PART_VEC_SIZE];

[numthreads(GROUP_SIZE, 1, 1)]
void Init(int3 id : SV_DispatchThreadID)
{
    for (int i = id.x; i < e_size; i += (GROUP_SIZE << 8))
        b_prefixLoad[i] = 1;
    
    if (id.x == 0)
        b_timing[id.x] = 0;
}

[numthreads(LANE_COUNT, WAVES_PER_GROUP, 1)]
void BlockPrefixSumExclusive(int3 gtid : SV_GroupThreadID)
{
    uint aggregate = 0;
    for (int partitionIndex = 0; partitionIndex < PARTITIONS; ++partitionIndex)
    {
        int i = LANE + WAVE_PART_START;
        g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
        
        uint t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].y;
        g_sharedMem[i].y = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].z;
        g_sharedMem[i].z = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].w;
        g_sharedMem[i].w = t;
        
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].x);
        
        i += LANE_COUNT;
        g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].y;
        g_sharedMem[i].y = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].z;
        g_sharedMem[i].z = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].w;
        g_sharedMem[i].w = t;
        
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].x) + WaveReadLaneAt(g_sharedMem[i - 1].x, 0);
        GroupMemoryBarrierWithGroupSync();
        
        if (WAVE_INDEX == 0 && LANE < WAVES_PER_GROUP)
            g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX].x) + aggregate;
        GroupMemoryBarrierWithGroupSync();
        
        t = WAVE_INDEX ? WaveReadLaneAt(g_sharedMem[LANE + WAVE_PART_START - 1].x, 0) : aggregate;
        aggregate = WaveReadLaneAt(g_sharedMem[PART_VEC_SIZE - 1].x, 0);
        GroupMemoryBarrierWithGroupSync();
        
        g_sharedMem[i].x = g_sharedMem[i - 1].x + (LANE != LANE_MASK ? 0 : t);
        b_prefixSum[i + PARTITION_START] = g_sharedMem[i] + (LANE != LANE_MASK ? t : 0);
        
        i -= LANE_COUNT;
        g_sharedMem[i].x = LANE ? g_sharedMem[i - 1].x : 0;
        b_prefixSum[i + PARTITION_START] = g_sharedMem[i] + t;
    }
    GroupMemoryBarrierWithGroupSync();
    
    const int finalPartSize = (e_size >> VECTOR_LOG) + (e_size & VECTOR_MASK ? 1 : 0) - PARTITION_START;
    
    int i = LANE + WAVE_PART_START;
    if (i < finalPartSize)
    {
        g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
        
        uint t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].y;
        g_sharedMem[i].y = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].z;
        g_sharedMem[i].z = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].w;
        g_sharedMem[i].w = t;
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].x);
    }
    
    i += LANE_COUNT;
    if (i < finalPartSize)
    {
        g_sharedMem[i] = b_prefixSum[i + PARTITION_START];
        
        uint t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].y;
        g_sharedMem[i].y = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].z;
        g_sharedMem[i].z = t;
        
        t = g_sharedMem[i].x;
        g_sharedMem[i].x += g_sharedMem[i].w;
        g_sharedMem[i].w = t;
        g_sharedMem[i] += WavePrefixSum(g_sharedMem[i].x) + WaveReadLaneAt(g_sharedMem[i - 1].x, 0);
    }
    
    GroupMemoryBarrierWithGroupSync();
    
    if (WAVE_INDEX == 0 && LANE < WAVES_PER_GROUP)
        g_sharedMem[SPINE_INDEX] += WavePrefixSum(g_sharedMem[SPINE_INDEX].x) + aggregate;
    GroupMemoryBarrierWithGroupSync();
    
    const uint t = WAVE_INDEX ? WaveReadLaneAt(g_sharedMem[LANE + WAVE_PART_START - 1].x, 0) : aggregate;
    
    if (i < finalPartSize)
    {
        g_sharedMem[i].x = g_sharedMem[i - 1].x + (LANE != LANE_MASK ? 0 : t);
        b_prefixSum[i + PARTITION_START] = g_sharedMem[i] + (LANE != LANE_MASK ? t : 0);
    }
    
    i -= LANE_COUNT;
    if (i < finalPartSize)
    {
        g_sharedMem[i].x = LANE ? g_sharedMem[i - 1].x : 0;
        b_prefixSum[i + PARTITION_START] = g_sharedMem[i] + t;
    }
    GroupMemoryBarrierWithGroupSync();
    
    //for timing the kernel
    if (LANE == 0 && WAVE_INDEX == 0)
        b_timing[0] = 1;
}